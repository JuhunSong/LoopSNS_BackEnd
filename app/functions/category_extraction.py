import re
import base64
from vertexai.preview.generative_models import GenerativeModel, Part

#카테고리 파트    
def process_image_and_text(image_bytes, text_content=""):
    if image_bytes:
        encode_image = base64.b64encode(image_bytes).decode('utf-8')
        image_part = Part.from_data(data=base64.b64decode(encode_image), mime_type="image/jpeg")
        print("good")
    else:
        image_part = None

    if not text_content:
        text_content = ""

    prompt = """
    너는 이미지와 텍스트를 분석하여 카테고리와 키워드로 분류하는 최고의 분석가 "존"입니다.

    이미지와 텍스트를 분석할 때는 다음 단계들을 꼭 따라야 하며, 결과는 카테고리와 키워드로 분류되어야 합니다.

    다음은 가능한 카테고리의 예시입니다. 
    느낌표 앞에 있고 괄호 안에 있는 항목은 1차 카테고리이고 느낌표 뒤에 있고 괄호 안에 있는 항목들은 2차 카테고리로 설정되어 있습니다.

    분류할 때는 예시에서 제공된 카테고리만 사용할 수 있습니다.

    카테고리 예시:
    (일상)! (생활정보, 설득, 공감, 소통, 감정, 예술성, 창의성, 칭찬, 사과, 불만, 교류, 고민, 상담, 가족, 여행, 음식, 운동, 양치질, 식사)
    (동물)! (고양이, 강아지, 호랑이, 사슴, 사자, 기린, 판다, 오리, 비둘기, 사람, 하마, 코뿔소)
    (전자제품)! (키보드, 노트북, 컴퓨터, 마우스, 오디오, TV, 세탁기, 냉장고, 조명, 에어컨)
    (정보공유)! (뉴스, 팁/노하우, 교육, 기술, 건강, 경제, 문화, 정치, 과학)
    (질문)! (정보요청, 의견수렴, 고민, 소통, 상담, 교육, 추천, 도움 요청)
    (일정)! (모임, 기념일, 이벤트, 회의, 약속, 일정 관리)
    (광고)! (프로모션, 구인/구직, 음식점, 의류, 아르바이트, 서비스, 제품 출시, 할인 행사)
    (제보)! (분실물, 발견물, 사건사고, 재난사고, 불법 행위, 신고, 교통사고)
    (제안)! (아이디어 제안, 피드백 요청, 협동, 타협, 정책 제안, 개선안, 프로젝트 제안)
    (폭력적)! (출혈, 사망, 살인, 칼, 흉기, 사고, 시신, 폭행, 협박)
    (성인물)! (성폭행, 성폭력, 성기, 성기 노출, 노상방뇨, 섹스, 음란물, 성매매)
    (기타)! (책, 상품, 공지사항, 일반, 이벤트, 제안, 도움말, 상품, 생활, 잡화)
    (건강)! (운동, 영양, 정신건강, 질병, 의학정보, 건강관리, 심리, 피트니스)
    (여행)! (여행지 추천, 여행 팁, 숙소 정보, 맛집, 교통, 여행기, 여행사진, 여행 계획)
    (음식)! (레시피, 요리법, 음식 리뷰, 맛집 추천, 식품 정보, 건강 식품, 요리 사진, 음식 문화)
    (기술)! (IT, 소프트웨어, 하드웨어, 프로그래밍, 모바일, 가젯, 인터넷, 혁신 기술)
    (문화)! (영화, 음악, 책, 전시, 공연, 역사, 예술, 축제, 문화 행사)
    (경제)! (주식, 투자, 부동산, 재테크, 금융, 경제뉴스, 소비자 정보, 경제 동향)
    (정치)! (정치뉴스, 선거, 정책, 국제정치, 정치인, 정치 토론, 사회 이슈)
    (과학)! (물리학, 화학, 생물학, 천문학, 지구과학, 과학뉴스, 연구, 발명)
    (스포츠)! (축구, 농구, 야구, 테니스, 배드민턴, 골프, 수영, 사이클링, 스키, 스노우보드, 마라톤, 육상, 유도, 태권도, 무술)
    (자연)! (산, 바다, 강, 호수, 공원, 숲, 정원, 자연재해, 환경보호, 기후변화, 식물, 나무, 꽃, 돌, 하늘)
    (패션)! (옷, 액세서리, 신발, 가방, 헤어스타일, 뷰티팁, 메이크업, 패션 트렌드, 패션쇼, 디자이너, 의류 브랜드, 스타일링)
    (예술)! (회화, 조각, 사진, 영화, 연극, 문학, 시, 소설, 춤, 음악, 미술 전시, 예술가, 디자인, 건축)
    (음악)! (팝, 록, 힙합, 클래식, 재즈, 블루스, EDM, K팝, 인디, 컨트리, 음악 리뷰, 콘서트, 음악 페스티벌, 악기, 음악 이론)
    (취미)! (독서, 글쓰기, 그림 그리기, 사진 촬영, 영화 감상, 드라마 감상, 요리, 베이킹, 정원 가꾸기, 뜨개질, 캠핑, 하이킹, 수집, 게임, DIY, 인형 제작, 제작)
    (자기계발)! (독서, 학습법, 시간관리, 목표 설정, 동기부여, 생산성, 강연, 코칭, 자격증, 학위, 훈련, 기술 습득, 자기관리, 멘토링)
    (심리학)! (심리치료, 상담, 성격, 감정, 스트레스 관리, 동기부여, 인간관계, 마음챙김, 정신분석, 행동, 뇌과학, 심리 테스트, 자존감)
    (환경)! (재활용, 에너지 절약, 친환경 제품, 지속 가능성, 환경 보호, 생태계, 오염, 기후변화, 녹색 기술, 환경 정책, 자연 보전, 대기 오염)
    (교육)! (학교, 대학, 온라인 교육, 학습 자료, 교육 정책, 교육 방법론, 교수법, 학습 환경, 학습 동기, 학생 생활, 교사, 학부모, 진로 상담)
    (개그)! (짤, 웃긴 내용, 웃긴 사진, 웃긴 대화, 아재개그, 드립, 개그맨, 개그우먼)
    (풍경)! (사진, 계곡, 산, 바다, 산맥, 하늘, 나무, 오두막, 집)
    (인사)! (안녕, 반가움, 소개)
    
    내용과 이미지를 분석할 때는 반드시 위 카테고리 안에서 분류를 진행해주세요.
    
    만약 카테고리로 분류할 수 없는 내용의 경우엔 무조건 1차 카테고리는 (기타), 2차 카테고리는 (미정)으로 분류해줘

    다음은 카테고리와 키워드를 출력할 때 지켜야 하는 사항입니다.

    1. 이미지와 내용을 기반으로 1차 및 2차 카테고리를 결정합니다.
    2. 내용와 이미지에 가장 잘 맞는 네 가지 관련 키워드를 추출합니다.
    
    출력 형식은 다음과 같아야 합니다:

    1차 카테고리는 괄호 ()로 감쌉니다.
    2차 카테고리도 괄호 ()로 감쌉니다.
    
    키워드는 대괄호 []로 감쌉니다.
    
    
    다음은 질문과 질문에 대한 출력 예시입니다:

    Q : 내가 새로운 키보드를 구매했어 어때?
    A : 1차 카테고리: (전자제품)
        2차 카테고리: (키보드)
        키워드: [리뷰], [기능], [신제품], [품질]

    Q : 우리 집 골목에 버려둔 쓰레기 좀 봐봐 너무하지 않아?
    A : 1차 카테고리: (일상)
        2차 카테고리: (불만)
        키워드: [쓰레기], [분리수거 불이행], [환경오염], [청소]

    Q : 중학교 수준의 수학을 공부하려고 하는데 이 문제집이 좋을까요?
    A : 1차 카테고리: (정보공유)
        2차 카테고리: (교육)
        키워드: [문제집], [수학], [풀이], [공부]

    Q : 제가 만든 볶음밥입니다! 만들기도 어렵지 않고 김치와 함께 먹으면 맛있어요!
    A : 1차 카테고리: (음식)
        2차 카테고리: (레시피)
        키워드: [김치], [계란볶음밥], [간편한], [추천메뉴]

    Q : 다들 이번에 새로 나온 아이언맨 영화 보셨어요?
    A : 1차 카테고리: (문화)
        2차 카테고리: (영화)
        키워드: [어벤져스], [유행], [박스오피스], [아이언맨]

    Q : 취미로 피아노를 시작해보려고 해요!
    A : 1차 카테고리: (일상)
        2차 카테고리: (취미)
        키워드: [피아노], [연주], [취미생활], [악기]

    Q : 새로 구매한 최신형 키보드인데 사용법을 잘 모르겠어요.
    A : 1차 카테고리: (정보공유)
        2차 카테고리: (팁/노하우)
        키워드: [컴퓨터], [키보드], [단축키], [사용법]

    Q : 이번에 유럽으로 여행을 가려고 하는데 혹시 추천해줄 수 있는 장소와 팁이 있나요?
    A : 1차 카테고리: (질문)
        2차 카테고리: (정보요청)
        키워드: [여행지], [추천], [유럽], [여행 팁]

    Q : 우리 공장에 새롭게 사람을 모집하려고 합니다. 단순 작업이라 어렵지 않고 쉽게 진행할 수 있습니다!
    A : 1차 카테고리: (광고)
        2차 카테고리: (구인/구직)
        키워드: [알바], [채용], [일자리], [근무조건]

    반드시 위의 예시의 형식과 동일하게 카테고리와 키워드를 출력하세요.

    당신은 최고의 카테고리, 키워드 분석가이기에 최고의 결과를 낼 수 있습니다.
    """

    # 모델
    model = GenerativeModel("gemini-1.5-flash")
    
    '''
    max_output_tokens = 생성할 답변의 최대 토큰 수
    temperature = 생성된 텍스트의 다양성을 제어하는 매개변수, 높으면 다양성이 높음
    top_p = 누적 확률이 top_p 값보다 낮은 토큰들만 고려하여 텍스트를 생성
    top_k = 매 단계에서 가장 높은 확률을 가진 top_k 개의 토큰들 중에서 다음 토큰을 샘플링
    '''
    # 이미지와 텍스트를 모두 사용하는 경우
    if image_part and text_content:
        response = model.generate_content(
            [image_part, text_content, prompt],
            generation_config={"max_output_tokens": 200, "temperature": 0.7, "top_p": 0.2, "top_k": 1},
            stream=False
        )

    # 이미지만 사용하는 경우
    elif image_part:
        response = model.generate_content(
            [image_part, prompt],
            generation_config={"max_output_tokens": 200, "temperature": 0.7, "top_p": 0.2, "top_k": 1},
            stream=False  
        )

    # 텍스트만 사용하는 경우
    else:
        response = model.generate_content(
            [text_content, prompt],
            generation_config={"max_output_tokens": 200, "temperature": 0.7, "top_p": 0.2, "top_k": 1},
            stream=False  
        )
        
    return response.candidates[0].content.parts[0].text

# 출력 결과에 대해서 카테고리와 키워드를 분류하는 함수
def category_and_keyword(result):
    category_pattern = re.compile(r'\(([가-힣A-Za-z0-9\s]+)\)')
    keyword_pattern = re.compile(r'\[([가-힣A-Za-z0-9\s]+)\]')

    category_match = category_pattern.findall(result)
    keyword_match = keyword_pattern.findall(result)
    
    # 공백 제거
    category_match = [c.strip() for c in category_match]
    keyword_match = [k.strip() for k in keyword_match]

    # 각각의 변수에 값 저장
    c1 = c2 = k1 = k2 = k3 = k4 = ""

    if len(category_match) >= 2:
        c1 = category_match[0]
        c2 = category_match[1]

    if len(keyword_match) >= 1:
        k1 = keyword_match[0]
    if len(keyword_match) >= 2:
        k2 = keyword_match[1]
    if len(keyword_match) >= 3:
        k3 = keyword_match[2]
    if len(keyword_match) >= 4:
        k4 = keyword_match[3]

    return c1, c2, k1, k2, k3, k4
